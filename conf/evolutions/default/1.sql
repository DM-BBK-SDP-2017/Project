# --- !Ups

create table "USERS" (
  "ID" INTEGER PRIMARY KEY,
  "USER" VARCHAR NOT NULL,
  "PASSWORD" VARCHAR NOT NULL,
  "NICKNAME" VARCHAR NOT NULL
);

CREATE TABLE GROUPS (
ID INTEGER PRIMARY KEY ,
GROUP_NAME VARCHAR NOT NULL,
CREATED_BY INTEGER,
CREATED_TIMESTAMP TIMESTAMP,

FOREIGN KEY(CREATED_BY) REFERENCES USERS(ID)
);

CREATE TABLE USER_GROUPS (
USER_ID INTEGER,
 GROUP_ID INTEGER,
 JOINED_TIMESTAMP TIMESTAMP,
 ADDED_BY_USER INTEGER,

   FOREIGN KEY(USER_ID) REFERENCES USERS(ID),
  FOREIGN KEY(ADDED_BY_USER) REFERENCES USERS(ID),
  FOREIGN KEY(GROUP_ID) REFERENCES GROUPS(ID)

);



create table "BLOGS" (
  ID INTEGER PRIMARY KEY,
  USERS_ID INTEGER NOT NULL,
  "WHEN" TIMESTAMP NOT NULL,
  WHAT VARCHAR NOT NULL,
  FOREIGN KEY(USERS_ID) REFERENCES USERS(ID)
);

create table "ARTEFACTS" (
  ID INTEGER PRIMARY KEY,
  CONTENT VARCHAR NOT NULL,
  CREATOR_ID VARCHAR NOT NULL,
  CATEGORIES_ID INTEGER,
  TAGS_ID INTEGER,
  "CREATED" TIMESTAMP NOT NULL,
  FOREIGN KEY (CREATOR_ID) REFERENCES USERS(ID),
  FOREIGN KEY (CATEGORIES_ID) REFERENCES ARTEFACT_CATEGORIES(ID)
);

CREATE TABLE ARTEFACT_TAGS (
  ID INTEGER PRIMARY KEY,
  CATEGORY_TAG VARCHAR UNIQUE NOT NULL,
  CREATOR_ID INTEGER NOT NULL,
  CREATED_DATE TIMESTAMP NOT NULL,
  FOREIGN KEY (CREATOR_ID) REFERENCES USERS(ID)
);

-- NOT SURE THIS IS REQUIRED ANY MORE
CREATE TABLE TAGS_FOR_ARTEFACTS (
  ARTEFACT_ID INTEGER NOT NULL,
  TAG_ID INTEGER NOT NULL,
  ADDED_DATE TIMESTAMP NOT NULL,
  ADDED_BY_USER INTEGER,
  FOREIGN KEY (ARTEFACT_ID) REFERENCES ARTEFACTS(ID),
  FOREIGN KEY (TAG_ID) REFERENCES ARTEFACT_TAGS(ID),
  FOREIGN KEY (ADDED_BY_USER) REFERENCES USERS(ID)
);

CREATE TABLE ARTEFACT_CATEGORIES (
  ID INTEGER PRIMARY KEY NOT NULL,
  CATEGORY_TITLE VARCHAR NOT NULL,
  "CREATOR" VARCHAR NOT NULL,
  CREATED_DATE TIMESTAMP NOT NULL

);

CREATE TABLE "ARTEFACT_VIEWS" (
  ARTEFACT_ID INTEGER,
  USER_ID INTEGER,
  "WHEN" TIMESTAMP NOT NULL,
  FOREIGN KEY (ARTEFACT_ID) REFERENCES ARTEFACTS(ID),
  FOREIGN KEY (USER_ID) REFERENCES USERS(ID)
);

CREATE TABLE "INTERACTIONS" (
  ARTEFACT_ID INTEGER,
  USER_ID INTEGER,
  INTERACTION_TYPE STRING,
  INTERACTION_TIMESTAMP TIMESTAMP NOT NULL,
  FOREIGN KEY (ARTEFACT_ID) REFERENCES ARTEFACTS(ID),
  FOREIGN KEY (USER_ID) REFERENCES USERS(ID)
);

CREATE TABLE "INTERACTION_TYPES" ( -- CAN DELETE?
  ID INTEGER PRIMARY KEY,
  INTERACTION_TYPE VARCHAR NOT NULL,
  ACTIVE INTEGER NOT NULL DEFAULT 1
);

CREATE TABLE LIKES ( -- CAN DELETE?
  ARTEFACT_ID INTEGER,
  USER_ID INTEGER,
  LIKE_DATE TIMESTAMP NOT NULL,

  FOREIGN KEY (ARTEFACT_ID) REFERENCES ARTEFACTS(ID),
  FOREIGN KEY (USER_ID) REFERENCES USERS(ID)
);

CREATE TABLE RECOMMENDATIONS (
  ID INTEGER PRIMARY KEY,
  ARTEFACT_ID INTEGER NOT NULL,
  RECOMMENDED_BY INTEGER NOT NULL,
  RECOMMENDED_FOR INTEGER NOT NULL,
  RECOMMENDATION_SCORE REAL,
  RECOMMENDED_TIMESTAMP TIMESTAMP,

    FOREIGN KEY (ARTEFACT_ID) REFERENCES ARTEFACTS(ID),
    FOREIGN KEY (RECOMMENDED_BY) REFERENCES USERS(ID),
    FOREIGN KEY (RECOMMENDED_FOR) REFERENCES GROUPS(ID)

);

CREATE TABLE COMMENTS (
  ARTEFACT_ID INTEGER,
  USER_ID INTEGER,
  TIMESTAMP TIMESTAMP NOT NULL,
  COMMENT_CONTENT VARCHAR NOT NULL,

  FOREIGN KEY (ARTEFACT_ID) REFERENCES ARTEFACTS(ID),
  FOREIGN KEY (USER_ID) REFERENCES USERS(ID)
);

CREATE TABLE MESSAGES (

MESSAGE_ID INTEGER PRIMARY KEY,
MESSAGE_TYPE VARCHAR NOT NULL,
FROM_USER INTEGER NOT NULL,
TO_USER INTEGER NOT NULL,
ARTEFACT_ID INTEGER,
MESSAGE VARCHAR,
TIMESTAMP TIMESTAMP,
FOREIGN KEY (ARTEFACT_ID) REFERENCES ARTEFACTS(ID),
FOREIGN KEY (FROM_USER) REFERENCES USERS(ID),
FOREIGN KEY (TO_USER) REFERENCES USERS(ID)

);

insert into "USERS" ("USER","PASSWORD","NICKNAME") values ("admin","admin","");
insert into "USERS" ("USER","PASSWORD","NICKNAME") values ("admin2","admin2","");





# --- !Downs

drop table "BLOGS";
drop table "USERS";
drop table "ARTEFACTS"